#tag ClassProtected Class MacOSXSearchField	#tag Method, Flags = &h0		Function AddToView(ViewHandle As Integer) As Boolean		  #if TargetCarbon		    Declare Function HIViewAddSubview Lib Carbon (inParent As Integer, inNewChild As Integer) As Integer		    Declare Function HIViewPlaceInSuperviewAt Lib Carbon (inView As Integer, inX As Integer, inY As Integer) As Integer		    		    dim err as integer		    err = HIViewAddSubview(ViewHandle,self)		    if err <> 0 then		      HandleError err,"HIViewAddSubview"		      return false		    end		    err = HIViewPlaceInSuperviewAt(self,0,0)		    if err <> 0 then		      HandleError err,"HIViewPlaceInSuperviewAt"		      return false		    end		    return true		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function CarbonEventReceived(EventHandlerCallRef As Integer, EventRef As Integer) As Integer		  #if TargetCarbon		    Declare Function GetEventClass Lib Carbon (inEvent as Integer) as Integer		    Declare Function GetEventKind Lib Carbon (inEvent as Integer) as Integer		    Declare Function GetEventParameter Lib Carbon (inEvent as Integer, inName as Integer, inDesiredType as Integer, outActualType as Ptr, inBufferSize as Integer, outBufferSize as Ptr, outData as Ptr) as Integer		    Declare Function SetEventParameter Lib Carbon (inEvent as Integer, inName as Integer, inType as Integer, inSize as Integer, inDataPtr as Ptr) as Integer		    		    dim eventclass as string		    dim eventkind,err,targetview as integer		    		    eventclass = OSType(GetEventClass(eventref))		    eventkind = GetEventKind(eventref)		    		    select case eventclass.smartreverse		    case kEventClassControl		      select case eventkind		      case kEventControlSetFocusPart		        dim buffer as memoryblock		        buffer = new memoryblock(2)		        err = GetEventParameter(eventref,OSTypeToUInt32(kEventParamControlPart),OSTypeToUInt32(typeControlPartCode),nil,buffer.size,nil,buffer)		        if err = 0 then		          if buffer.short(0) = kControlFocusNoPart then		            LostFocus		          else		            GotFocus		          end		        else		          HandleError err,"GetEventParameter"		        end		      case kEventControlGetSizeConstraints		        dim buffer as memoryblock		        buffer = new memoryblock(8)		        buffer.singlevalue(0) = me.maxwidth		        buffer.singlevalue(4) = 16		        err = SetEventParameter(EventRef,OSTypeToUInt32(kEventParamMaximumSize),OSTypeToUInt32(typeHISize),buffer.size,buffer)		        if err <> 0 then		          HandleError err,"SetEventParameter"		          return eventNotHandledErr		        end		        buffer = new memoryblock(8)		        buffer.singlevalue(0) = me.minwidth		        buffer.singlevalue(4) = 16		        err = SetEventParameter(EventRef,OSTypeToUInt32(kEventParamMinimumSize),OSTypeToUInt32(typeHISize),buffer.size,buffer)		        if err <> 0 then		          HandleError err,"SetEventParameter"		          return eventNotHandledErr		        end		        return 0		      case kEventControlHit		        return 0		      end		    case kEventClassTextField		      select case eventkind		      case keventtextaccepted		        if me.text = "" then		          SearchCleared		        else		          Search me.text		        end		        return 0		      case keventtextdidchange		        if me.text <> "" then		          me.hascancelbutton = true		        else		          me.hascancelbutton = false		        end		        if livesearch then		          if me.text = "" then		            SearchCleared		          else		            Search me.text		          end		        end		      end		    case kEventClassSearchField		      select case eventkind		      case kEventSearchFieldCancelClicked		        SearchCleared		        me.text = ""		        me.hascancelbutton = false		        return 0		      end		    case kEventClassMouse		      select case eventkind		      case kEventMouseUp, kEventMouseDown, kEventMouseDragged		        Declare Function HIViewGetViewForMouseEvent Lib Carbon (inView As Integer, inEvent As Integer, ByRef outView As Integer) As Integer		        Declare Function HIViewClick Lib Carbon (inView As Integer, inEvent As Integer) As Integer		        dim buffer as memoryblock		        dim p as hipoint		        dim part,clickpart as integer		        		        err = HIViewGetViewForMouseEvent(mycontentview,eventref,targetview)		        if err <> 0 or targetview <> phandle then		          HandleError err,"HIViewGetViewForMouseEvent"		          return eventNotHandledErr		        end		        err = HIViewClick(phandle,eventref)		        if err <> 0 then		          HandleError err,"HIViewClick"		          return eventNotHandledErr		        end		        return 0		      end		    case kEventClassCommand		      select case eventkind		      case kEventCommandProcess		        dim buffer as memoryblock		        dim m as macosxmenu		        buffer = new memoryblock(14)		        		        err = GetEventParameter(eventref,OSTypeToUInt32(kEventParamDirectObject),OSTypeToUInt32(typeHICommand),nil,buffer.size,nil,buffer)		        if err <> 0 then		          HandleError err,"GetEventParameter"		          return eventNotHandledErr		        end		        m = new macosxmenu(buffer.long(8))		        MenuChanged m,buffer.short(12)		        return 0		      else		        return eventNotHandledErr		      end		    case kEventClassMenu		      select case eventkind		      case kEventMenuEnableItems		        EnableMenuItems		        return 0		      else		        return eventNotHandledErr		      end		    end		    return eventNotHandledErr		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function CFStringFromREALbasicString(s as String) As Integer		  #if TargetCarbon		    Declare Function CFStringCreateWithCString Lib Carbon (alloc as Integer, cStr as CString,encoding as Integer) as Integer		    Declare Sub CFRelease Lib Carbon (ref as Integer)		    		    Const kCFAllocatorDefault = 0		    Const kCFStringEncodingInvalidId = &hffffffff		    		    dim theRef as Integer		    If Encoding(s) <> nil then		      theRef = CFStringCreateWithCString(kCFAllocatorDefault, s, Encoding(s).code)		    Else		      theRef = CFStringCreateWithCString(kCFAllocatorDefault, s, kCFStringEncodingInvalidId)		    End if		    Return theRef		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub ChangeAttributes(AttributesToSet As Integer, AttributesToClear As Integer)		  #if TargetCarbon		    if phandle <> 0 then		      Declare Function HISearchFieldChangeAttributes Lib Carbon (inSearchField As Integer, inAttributesToSet As Integer, inAttributesToClear As Integer) As Integer		      		      dim err as integer		      err = HISearchFieldChangeAttributes(phandle,AttributesToSet,AttributesToClear)		      HandleError err,"HISearchFieldChangeAttributes"		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Create(InWindow As Window = Nil) As Boolean		  #if TargetCarbon		    Declare Function HISearchFieldCreate Lib Carbon (ByRef inBounds As HIRect, inAttributes As Integer, inSearchMenu As Ptr, inDescriptiveText As CFStringRef, ByRef outRef As Integer) As Integer		    Declare Function HIViewChangeFeatures Lib Carbon (inView As Integer, ByRef inFeaturesToSet As Integer, inFeaturesToClear As Integer) As Integer		    		    dim err as integer		    dim bounds as hirect		    dim type as controlid		    dim featureSet,featureClear as integer		    bounds.left = 0		    bounds.top = 0		    bounds.width = 0		    bounds.height = 0		    type.signature = SmartReverse("wind")		    type.id = 1		    err = HISearchFieldCreate(bounds,0,nil,"",pHandle)		    if err <> 0 then		      HandleError err,"HISearchFieldCreate"		      return false		    end		    me.RegisterSearchField self		    if inwindow <> nil then		      mycontentView = MacOSXSearchFieldModule.GetContentViewForWindow(inwindow)		      if mycontentView = 0 then		        HandleError "Could not locate window's content view"		        return false		      end		      if not me.addtoview(mycontentView) then		        return false		      end		      me.RegisterSearchFieldOnWindow self,inwindow		    end		    Open		    return true		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Destroy()		  Close		  me.UnregisterSearchField self		  phandle = 0		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function FindSearchField(SearchHandle As Integer) As MacOSXSearchField		  #if TargetCarbon		    dim i as integer		    for i = ubound(searchfields) downto 0 		      if searchfields(i).handle = searchhandle then		        return searchfields(i)		      end		    next		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub GetFrame(ByRef Bounds As HIRect)		  #if TargetCarbon		    dim err as integer		    Declare Function HIViewGetFrame Lib Carbon (inView As Integer, ByRef outRect As HIRect) As Integer		    if phandle <> 0 then		      err = HIViewGetFrame(self,bounds)		      if err <> 0 then		        HandleError err,"HIViewGetFrame"		      end		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Handle() As Integer		  return pHandle		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function HandleCarbonEvent(EventHandlerCallRef as Integer, EventRef as Integer, UserData as Integer) As Integer		  dim s as macosxsearchfield		  dim r as integer		  s = findsearchfield(userdata)		  if s = nil then		    return eventNotHandledErr		  end		  r = s.carboneventreceived(eventhandlercallref,eventref)		  if r = eventNotHandledErr then		  end		  return r		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub HandleError(ErrorNum As Integer, ErrorLocation As String)		  if errornum <> 0 then		    Error errornum,ErrorLocation + " failed with error #" + str(errornum)		    LogError ErrorNum,ErrorLocation		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub HandleError(ErrorString As String)		  Error 0,ErrorString		  LogError ErrorString		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Height() As Integer		  dim bounds as hirect		  me.getframe bounds		  return bounds.height		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Height(Assigns Value As Integer)		  dim bounds as hirect		  me.getframe bounds		  bounds.height = value		  me.setframe bounds		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function kHISearchFieldAttributesCancel() As Integer		  return bitwise.shiftleft(1,0)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function kHISearchFieldAttributesSearchIcon() As Integer		  return bitwise.shiftleft(1,1)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Left() As Integer		  dim bounds as hirect		  me.getframe bounds		  return bounds.left		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Left(Assigns Value As Integer)		  dim bounds as hirect		  me.getframe bounds		  bounds.left = value		  me.setframe bounds		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub LogError(ErrorNum As Integer, ErrorLocation As String)		  System.Log System.LogLevelError,ErrorLocation + " failed with error #" + str(errornum)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub LogError(ErrorString As String)		  System.Log System.LogLevelError,ErrorString		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Operator_Convert() As Integer		  return phandle		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function OSType(theValue as Integer) As String		  Static m as new MemoryBlock(4)		  m.Long(0) = theValue		  Return DefineEncoding(m.StringValue(0, 4), Encodings.MacRoman)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function REALbasicStringFromCFString(stringRef as Integer) As String		  #if TargetCarbon		    if stringRef = 0 then		      Return ""		    end if		    		    Declare Function CFStringGetLength Lib Carbon (theString as Integer) as Integer		    Declare Function CFStringGetMaximumSizeForEncoding Lib Carbon (length as Integer, enc as Integer) as Integer		    Declare Function CFStringGetCString Lib Carbon (theString as Integer, buffer as Ptr, bufferSize as Integer, enc as Integer) as Boolean		    		    Const kCFStringEncodingUTF8 = &h08000100		    		    dim charCount as Integer = CFStringGetLength(stringRef)		    dim maxSize as Integer = CFStringGetMaximumSizeForEncoding(charCount, kCFStringEncodingUTF8)		    		    const sizeOfCStringTerminator = 1		    dim buffer as new MemoryBlock(sizeOfCStringTerminator + maxSize)		    If CFStringGetCString(stringRef, buffer, buffer.Size, kCFStringEncodingUTF8) then		      Return Left(DefineEncoding(buffer.StringValue(0, maxSize), Encodings.UTF8), charCount)		    Else		      Return ""		    End if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RegisterCarbonEventHandlerForMenu(TheMenu As MacOSXMenu)		  #if TargetCarbon		    if themenu = nil then		      return		    end		    		    Declare Function InstallEventHandler Lib Carbon (inTarget as Integer, inHandler as Integer, inNumTypes as Integer, inList as Ptr,  inUserData as Integer, handlerRef as Ptr) as Integer		    Declare Function HIObjectGetEventTarget Lib Carbon (inObject as Integer) as Integer		    Declare Function NewEventHandlerUPP Lib Carbon (userRoutine as Ptr) as Integer		    		    dim target as integer		    target = HIObjectGetEventTarget(themenu)		    if target = 0 then		      return		    end		    		    static callbackupp as integer		    if callbackupp = 0 then		      dim m as memoryblock = addressof handlecarbonevent		      if m is nil then		        return		      end		      callbackupp = NewEventHandlerUPP(m)		    end		    		    const sizeofeventtypespec = 8		    const eventcount = 2		    dim events as new memoryblock(eventcount * sizeofeventtypespec)		    events.stringvalue(0,4) = kEventClassCommand.smartreverse		    events.long(4) = kEventCommandProcess		    events.stringvalue(8,4) = kEventClassMenu.smartreverse		    events.long(12) = kEventMenuEnableItems		    		    dim err as integer		    err = InstallEventHandler(target,callbackupp,events.size \ sizeofeventtypespec,events,me.handle,nil)		    if err <> 0 then		      HandleError err,"InstallEventHandler"		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub RegisterSearchField(SearchField As MacOSXSearchField)		  #if TargetCarbon		    dim i as integer		    		    for i = 0 to ubound(searchfields)		      if searchfields(i).handle = searchfield.handle then		        return		      end		    next		    searchfields.append searchfield		    		    Declare Function InstallEventHandler Lib Carbon (inTarget as Integer, inHandler as Integer, inNumTypes as Integer, inList as Ptr,  inUserData as Integer, handlerRef as Ptr) as Integer		    Declare Function HIObjectGetEventTarget Lib Carbon (inObject as Integer) as Integer		    Declare Function NewEventHandlerUPP Lib Carbon (userRoutine as Ptr) as Integer		    		    dim target as integer		    target = HIObjectGetEventTarget(searchfield.handle)		    if target = 0 then		      return		    end		    		    static callbackupp as integer		    if callbackupp = 0 then		      dim m as memoryblock = addressof handlecarbonevent		      if m is nil then		        return		      end		      callbackupp = NewEventHandlerUPP(m)		    end		    		    const sizeofeventtypespec = 8		    const eventcount = 5		    dim events as new memoryblock(eventcount * sizeofeventtypespec)		    events.stringvalue(0,4) = kEventClassSearchField.smartreverse		    events.long(4) = kEventSearchFieldCancelClicked		    events.stringvalue(8,4) = kEventClassTextField.smartreverse		    events.long(12) = kEventTextAccepted		    events.stringvalue(16,4) = kEventClassControl.smartreverse		    events.long(20) = kEventControlSetFocusPart		    events.stringvalue(24,4) = kEventClassTextField.smartreverse		    events.long(28) = kEventTextDidChange		    events.stringvalue(32,4) = kEventClassControl.smartreverse		    events.long(36) = kEventControlGetSizeConstraints		    		    dim err as integer		    err = InstallEventHandler(target,callbackupp,events.size \ sizeofeventtypespec,events,searchfield.handle,nil)		    if err <> 0 then		      LogError err,"InstallEventHandler"		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub RegisterSearchFieldOnWindow(SearchField As MacOSXSearchField, W As Window)		  #if TargetCarbon		    dim i as integer		    		    Declare Function InstallEventHandler Lib Carbon (inTarget as Integer, inHandler as Integer, inNumTypes as Integer, inList as Ptr,  inUserData as Integer, handlerRef as Ptr) as Integer		    Declare Function HIObjectGetEventTarget Lib Carbon (inObject as Integer) as Integer		    Declare Function NewEventHandlerUPP Lib Carbon (userRoutine as Ptr) as Integer		    		    dim target as integer		    target = HIObjectGetEventTarget(w.handle)		    if target = 0 then		      return		    end		    		    static callbackupp as integer		    if callbackupp = 0 then		      dim m as memoryblock = addressof handlecarbonevent		      if m is nil then		        return		      end		      callbackupp = NewEventHandlerUPP(m)		    end		    		    const sizeofeventtypespec = 8		    const eventcount = 3		    dim events as new memoryblock(eventcount * sizeofeventtypespec)		    events.stringvalue(0,4) = kEventClassMouse.smartreverse		    events.long(4) = kEventMouseDown		    events.stringvalue(8,4) = kEventClassMouse.smartreverse		    events.long(12) = kEventMouseUp		    events.stringvalue(16,4) = kEventClassMouse.smartreverse		    events.long(20) = kEventMouseDragged		    'events.stringvalue(24,4) = kEventClassMouse		    'events.long(28) = kEventMouseEntered		    'events.stringvalue(32,4) = kEventClassMouse		    'events.long(36) = kEventMouseExited		    'events.stringvalue(40,4) = kEventClassMouse		    'events.long(44) = kEventMouseMoved		    'events.stringvalue(48,4) = kEventClassMouse		    'events.long(52) = kEventMouseWheelMoved		    		    dim err as integer		    err = InstallEventHandler(target,callbackupp,events.size \ sizeofeventtypespec,events,searchfield.handle,nil)		    if err <> 0 then		      LogError err,"InstallEventHandler"		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFocus()		  #if TargetCarbon		    if phandle = 0 then		      return		    end		    		    Declare Function GetControlOwner Lib Carbon (inControl as Integer) as Integer		    Declare Function SetKeyboardFocus Lib Carbon (inWindow as Integer, inControl as Integer, inPart as Short) as Short		    		    dim owner as integer		    owner = GetControlOwner(self)		    if owner = 0 then		      return		    end		    dim err as integer		    err = SetKeyboardFocus(owner, self, kControlEditTextPart)		    if err <> 0 then		      HandleError err,"SetKeyboardFocus"		    end		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SetFrame(ByRef Bounds As HIRect)		  #if TargetCarbon		    Declare Function HIViewSetFrame Lib Carbon (inView As Integer, ByRef outRect As HIRect) As Integer		    dim err as integer		    if phandle <> 0 then		      err = HIViewSetFrame(self,Bounds)		      if err <> 0 then		        HandleError err,"HIViewSetFrame"		      end		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function TestAttribute(Attribute As Integer) As Boolean		  #if TargetCarbon		    Declare Function HISearchFieldGetAttributes Lib Carbon (inSearchField As Integer, ByRef optionAttributes As Integer) As Integer		    		    dim err,attributesbit,i as integer		    		    if phandle <> 0 then		      err = HISearchFieldGetAttributes(me,attributesbit)		      		      i = bitwise.bitand(attributesbit,attribute)		      if i = Attribute then		        return true		      end		    end		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Top() As Integer		  dim bounds as hirect		  me.getframe bounds		  return bounds.top		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Top(Assigns Value As Integer)		  dim bounds as hirect		  me.getframe bounds		  bounds.top = value		  me.setframe bounds		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub UnregisterSearchField(SearchField As MacOSXSearchField)		  #if TargetCarbon		    dim i as integer		    for i = ubound(searchfields) downto 0		      if searchfields(i).handle = searchfield.handle then		        searchfields.remove i		      end		    next		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Width() As Integer		  dim bounds as hirect		  me.getframe bounds		  return bounds.width		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Width(Assigns Value As Integer)		  dim bounds as hirect		  me.getframe bounds		  bounds.width = value		  me.setframe bounds		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event Close()	#tag EndHook	#tag Hook, Flags = &h0		Event EnableMenuItems()	#tag EndHook	#tag Hook, Flags = &h0		Event Error(ErrorNum As Integer, ErrorString As String)	#tag EndHook	#tag Hook, Flags = &h0		Event GotFocus()	#tag EndHook	#tag Hook, Flags = &h0		Event LostFocus()	#tag EndHook	#tag Hook, Flags = &h0		Event MenuChanged(SelectedMenu As MacOSXMenu, Index As Integer)	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event Search(SearchString As String)	#tag EndHook	#tag Hook, Flags = &h0		Event SearchCleared()	#tag EndHook	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    dim latent as boolean			    if phandle <> 0 then			      Declare Function HIViewIsActive Lib Carbon (inView As Integer, ByRef outIsLatentEnabled As Boolean) As Boolean			      return HIViewIsActive(self,latent)			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    dim err as integer			    if phandle <> 0 then			      Declare Function HIViewSetActivated Lib Carbon (inView As Integer, inSetActivated As Boolean) As Integer			      err = HIViewSetActivated(self,value)			      if err <> 0 then			        HandleError err,"HIViewSetActivated"			      end			    end			  #endif			End Set		#tag EndSetter		Active As Boolean	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    dim latent as boolean			    if phandle <> 0 then			      Declare Function HIViewIsEnabled Lib Carbon (inView As Integer, ByRef outIsLatentEnabled As Boolean) As Boolean			      return HIViewIsEnabled(self,latent)			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    dim err as integer			    if phandle <> 0 then			      Declare Function HIViewSetEnabled Lib Carbon (inView As Integer, inSetEnabled As Boolean) As Integer			      err = HIViewSetEnabled(self,value)			      if err <> 0 then			        HandleError err,"HIViewSetEnabled"			      end			    end			  #endif			End Set		#tag EndSetter		Enabled As Boolean	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h21		#tag Getter			Get			  #if TargetCarbon			    if phandle = 0 then			      return false			    end			    			    return me.testattribute(kHISearchFieldAttributesCancel)			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    if phandle <> 0 then			      if value then			        me.ChangeAttributes kHISearchFieldAttributesCancel,kHISearchFieldNoAttributes			      else			        me.ChangeAttributes kHISearchFieldNoAttributes,kHISearchFieldAttributesCancel			      end			    end			  #endif			End Set		#tag EndSetter		Private HasCancelButton As Boolean	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    if phandle = 0 then			      return false			    end			    			    return me.testattribute(kHISearchFieldAttributesSearchIcon)			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    if phandle <> 0 then			      if value then			        me.ChangeAttributes kHISearchFieldAttributesSearchIcon,kHISearchFieldNoAttributes			      else			        me.ChangeAttributes kHISearchFieldNoAttributes,kHISearchFieldAttributesSearchIcon			      end			    end			  #endif			End Set		#tag EndSetter		HasSearchIcon As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h0		LiveSearch As Boolean = True	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    Declare Function HIViewGetMaximum Lib Carbon (inView As Integer) As Integer			    			    if phandle <> 0 then			      return HIViewGetMaximum(phandle)			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    Declare Function HIViewSetMaximum Lib Carbon (inView As Integer, inMaximum As Integer) As Integer			    			    dim err as integer			    if phandle <> 0 then			      err = HIViewSetMaximum(phandle,value)			      if err <> 0 then			        HandleError err,"HIViewSetMaximum"			      end			    end			  #endif			End Set		#tag EndSetter		MaxWidth As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    if phandle = 0 then			      return nil			    end			    			    Declare Function HISearchFieldGetSearchMenu Lib Carbon (inSearchField As Integer, ByRef outSearchMenu As Integer) As Integer			    			    dim menuHandle,err as integer			    			    err = HISearchFieldGetSearchMenu(me,menuHandle)			    if err <> 0 then			      HandleError err,"HISearchFieldGetSearchMenu"			      return nil			    else			      return new macosxmenu(menuhandle)			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    if phandle = 0 then			      return			    end			    			    Declare Function HISearchFieldSetSearchMenu Lib Carbon (inSearchField As Integer, inSearchMenu As Integer) As Integer			    			    dim err as integer			    			    if value <> nil then			      err = HISearchFieldSetSearchMenu(me,value)			      if err <> 0 then			        HandleError err,"HISearchFieldSetSearchMenu"			      else			        RegisterCarbonEventHandlerForMenu value			      end			    else			      err = HISearchFieldSetSearchMenu(me,0)			      if err <> 0 then			        HandleError err,"HISearchFieldSetSearchMenu"			      end			    end			  #endif			End Set		#tag EndSetter		Menu As MacOSXMenu	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    Declare Function HIViewGetMinimum Lib Carbon (inView As Integer) As Integer			    			    if phandle <> 0 then			      return HIViewGetMinimum(phandle)			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    Declare Function HIViewSetMinimum Lib Carbon (inView As Integer, inMinimum As Integer) As Integer			    			    dim err as integer			    if phandle <> 0 then			      err = HIViewSetMinimum(phandle,value)			      if err <> 0 then			        HandleError err,"HIViewSetMinimum"			      end			    end			  #endif			End Set		#tag EndSetter		MinWidth As Integer	#tag EndComputedProperty	#tag Property, Flags = &h21		Private MyContentView As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private pHandle As Integer	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    dim value as integer			    dim err as integer			    if phandle <> 0 then			      Declare Function HISearchFieldCopyDescriptiveText Lib Carbon (inSearchField As Integer, ByRef inDescription As Integer) As Integer			      err = HISearchFieldCopyDescriptiveText(pHandle,value)			      if err <> 0 then			        HandleError err,"HISearchFieldCopyDescriptiveText"			      else			        return REALbasicStringFromCFString(value)			      end			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    dim err as integer			    if phandle <> 0 then			      Declare Function HISearchFieldSetDescriptiveText Lib Carbon (inSearchField As Integer, inDescription As CFStringRef) As Integer			      err = HISearchFieldSetDescriptiveText(pHandle,value)			      if err <> 0 then			        HandleError err,"HISearchFieldSetDescriptiveText"			      end			    end			  #endif			End Set		#tag EndSetter		Placeholder As String	#tag EndComputedProperty	#tag Property, Flags = &h21		Private Shared SearchFields() As MacOSXSearchField	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    Declare Function GetControlDataSize Lib Carbon (inControl as Integer, inPart as Short, inTagName as Integer, ByRef outMaxSize as Integer) as Short			    Declare Function GetControlData Lib Carbon (inControl as Integer, inPart as Short, inTagName as Integer, inBufferSize as Integer, inBuffer as Ptr, outActualSize as Ptr) as Short			    			    dim bufferSize as Integer			    dim OSError as Integer = GetControlDataSize(self, kControlEditTextPart, OSTypeToUInt32(kControlEditTextCFStringTag), bufferSize)			    If bufferSize < 1 then			      Return ""			    End if			    dim buffer as new MemoryBlock(bufferSize)			    OSError = GetControlData(self, kControlEditTextPart, OSTypeToUInt32(kControlEditTextCFStringTag), buffer.Size, buffer, Nil)			    If OSError <> 0 then			      HandleError oserror,"GetControlData"			      Return ""			    End if			    Return REALbasicStringFromCFString(buffer.Long(0))			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    Declare Function SetControlData Lib Carbon (inControl as Integer, inPart as Short, inTagName as Integer, inSize as Integer, ByRef inBuffer as Integer) as Short			    Declare Sub CFRelease Lib Carbon (cf as Integer)			    			    dim stringRef as Integer = CFStringFromREALbasicString(value)			    If stringRef <> 0 then			      dim OSError as Integer = SetControlData(self, kControlEditTextPart, OSTypeToUInt32(kControlEditTextCFStringTag), 4, stringRef)			      CFRelease stringRef			      if oserror <> 0 then			        HandleError oserror,"SetControlData"			      end			    End if			  #endif			End Set		#tag EndSetter		Text As String	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  #if TargetCarbon			    if phandle <> 0 then			      Declare Function HIViewIsVisible Lib Carbon (inView As Integer) As Boolean			      return HIViewIsVisible(self)			    end			  #endif			End Get		#tag EndGetter		#tag Setter			Set			  #if TargetCarbon			    dim err as integer			    if phandle <> 0 then			      Declare Function HIViewSetVisible Lib Carbon (inView As Integer, inVisible As Boolean) As Integer			      err = HIViewSetVisible(self,value)			      if err <> 0 then			        HandleError err,"HIViewSetVisible"			      end			    end			  #endif			End Set		#tag EndSetter		Visible As Boolean	#tag EndComputedProperty	#tag Constant, Name = Carbon, Type = String, Dynamic = False, Default = \"CarbonLib", Scope = Private		#Tag Instance, Platform = Mac Mach-O, Language = Default, Definition  = \"Carbon"	#tag EndConstant	#tag Constant, Name = eventNotHandledErr, Type = Double, Dynamic = False, Default = \"-9874", Scope = Private	#tag EndConstant	#tag Constant, Name = kControlEditTextCFStringTag, Type = String, Dynamic = False, Default = \"cfst", Scope = Private	#tag EndConstant	#tag Constant, Name = kControlEditTextPart, Type = Double, Dynamic = False, Default = \"5", Scope = Private	#tag EndConstant	#tag Constant, Name = kControlFocusNoPart, Type = Double, Dynamic = False, Default = \"0", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassCommand, Type = String, Dynamic = False, Default = \"cmds", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassControl, Type = String, Dynamic = False, Default = \"cntl", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassMenu, Type = String, Dynamic = False, Default = \"menu", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassMouse, Type = String, Dynamic = False, Default = \"mous", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassSearchField, Type = String, Dynamic = False, Default = \"srfd", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassTextField, Type = String, Dynamic = False, Default = \"txfd", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventCommandProcess, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventControlClick, Type = Double, Dynamic = False, Default = \"13", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventControlGetSizeConstraints, Type = Double, Dynamic = False, Default = \"105", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventControlHit, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventControlSetFocusPart, Type = Double, Dynamic = False, Default = \"7", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMenuEnableItems, Type = Double, Dynamic = False, Default = \"8", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseDown, Type = Double, Dynamic = False, Default = \"2", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseDragged, Type = Double, Dynamic = False, Default = \"6", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseEntered, Type = Double, Dynamic = False, Default = \"8", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseExited, Type = Double, Dynamic = False, Default = \"9", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseMoved, Type = Double, Dynamic = False, Default = \"5", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseUp, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventMouseWheelMoved, Type = Double, Dynamic = False, Default = \"10", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventParamControlPart, Type = String, Dynamic = False, Default = \"cprt", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventParamDirectObject, Type = String, Dynamic = False, Default = \"----", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventParamMaximumSize, Type = String, Dynamic = False, Default = \"mxsz", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventParamMinimumSize, Type = String, Dynamic = False, Default = \"mnsz", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventParamMouseLocation, Type = String, Dynamic = False, Default = \"mloc", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventParamWindowMouseLocation, Type = String, Dynamic = False, Default = \"wmou", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventSearchFieldCancelClicked, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventTextAccepted, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventTextDidChange, Type = Double, Dynamic = False, Default = \"3", Scope = Private	#tag EndConstant	#tag Constant, Name = kHISearchFieldNoAttributes, Type = Double, Dynamic = False, Default = \"0", Scope = Private	#tag EndConstant	#tag Constant, Name = typeControlPartCode, Type = String, Dynamic = False, Default = \"cprt", Scope = Private	#tag EndConstant	#tag Constant, Name = typeHICommand, Type = String, Dynamic = False, Default = \"hcmd", Scope = Private	#tag EndConstant	#tag Constant, Name = typeHISize, Type = String, Dynamic = False, Default = \"hisz", Scope = Private	#tag EndConstant	#tag Constant, Name = typeQDPoint, Type = String, Dynamic = False, Default = \"QDpt", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Active"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Group="Appearance"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="HasSearchIcon"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="LiveSearch"			Group="Behavior"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="MaxWidth"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="MinWidth"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Placeholder"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Text"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Group="Appearance"			InitialValue="True"			Type="Boolean"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass