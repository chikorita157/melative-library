#tag ClassProtected Class WindowMenuInherits MenuItem	#tag Event		Sub EnableMenu()		  static LocalizedTextSet as Boolean = false //menu text only needs to be set once		  		  if not LocalizedTextSet then		    me.Text = LocalizedText		    LocalizedTextSet = true		  end if		  		  me.RelocateApplicationSpecificMenuItems		  me.RemoveDeadWindowMenuItems		  me.AddNewWindows		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Sub AddNewWindows()		  dim insertIndex as Integer		  dim WindowMenuItems as new Dictionary		  		  for i as Integer = 0 to me.Count - 1		    if me.Item(i) IsA WindowMenuItem then		      WindowMenuItems.Value(WindowMenuItem(me.Item(i)).Window) = true		    else		      insertIndex = insertIndex + 1		    end if		  next		  		  for i as Integer = 0 to WindowCount - 1		    if (Window(i) IsA WindowMenuWindow and not WindowMenuWindow(Window(i)).ShowInMenu) then //skip		      continue		    end if		    		    if (Window(i).Frame = Window.FrameTypeDocument) then		      if NOT WindowMenuItems.HasKey(Window(i)) then		        dim m as new WindowMenuItem(Window(i))		        me.Insert insertIndex, m		        WindowMenuItems.Value(Window(i)) = true		      end if		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  RegisterForCarbonEvents		  		  Super.MenuItem		  		  me.Insert 0, new WindowMinimizeMenuItem		  me.Insert 1, new WindowZoomMenuItem		  me.Insert 2, new SeparatorMenuItem		  me.Append new WindowBringAllToFrontMenuItem		  me.Append new SeparatorMenuItem		  		  //I can't set the localized menu title here, because its value is overwritten by the IDE-specified value		  //after the object is constructed		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function FindMenu(menuName as String) As MenuItem		  dim mBar as MenuBar = App.MenuBar		  if mBar is nil then		    return nil		  end if		  		  dim theResult as MenuItem		  for i as Integer = 0 to mBar.Count - 1		    dim m as MenuItem = mBar.Item(i)		    if m is nil then		      continue		    end if		    if m.Text = menuName then		      theResult = m		      exit		    end if		  next		  return theResult		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function HandleCarbonEvent(EventHandlerCallRef as Ptr, EventRef as Ptr, UserData as Ptr) As Integer		  soft declare function GetEventParameter Lib CarbonLib (inEvent as Ptr, inName as OSType, inDesiredType as OSType, outActualType as Ptr, inBufferSize as Integer, outBufferSize as Ptr, ByRef outData as Ptr) as Integer		  		  dim theMenu as Ptr		  dim OSStatus as Integer = GetEventParameter(EventRef, kEventParamDirectObject, typeMenuRef, nil, 4, nil, theMenu)		  		  		  soft declare function CopyMenuTitleAsCFString Lib CarbonLib (inMenu as Ptr,  ByRef outString as CFStringRef) as Integer		  		  dim menuName as CFStringRef		  OSStatus = CopyMenuTitleAsCFString(theMenu, menuName)		  if OSStatus <> 0 then		    return eventNotHandledErr		  end if		  		  if menuName <> LocalizedText then //it's not the window menu		    return eventNotHandledErr		  end if		  		  dim windMenu as MenuItem = FindMenu(menuName)		  if windMenu is nil then		    return eventNotHandledErr		  end if		  		  for i as Integer = 0 to windMenu.Count - 1		    dim theItem as MenuItem = windMenu.Item(i)		    if not theItem isA WindowMenuItem then		      continue		    end if		    		    dim menuWindow as Window = WindowMenuItem(theItem).Window		    if menuWindow is nil then		      continue		    end if		    		    soft declare function IsWindowModified lib CarbonFramework (w as WindowPtr) as Boolean		    soft declare function IsWindowCollapsed Lib CarbonFramework (window as WindowPtr) as Boolean		    soft declare function FrontNonFloatingWindow Lib CarbonFramework () as Integer		    		    soft declare sub SetItemMark Lib CarbonFramework (theMenu as Ptr, item as Short, markChar as Short)		    		    const noMark = 0		    const checkMark = 18		    const diamondMark = 19		    const kBulletCharCode = 165		    		    if (menuWindow.Handle = FrontNonFloatingWindow) then		      SetItemMark theMenu, i + 1, checkMark		      		    elseif IsWindowCollapsed(menuWindow) then		      SetItemMark theMenu, i + 1, diamondMark		      		      //IsWindowModified returns true by default.  If you want to mark windows with unsaved changes as suggested by the Aqua HIG, then you should		      //set the modified state using SetWindowModified, then uncomment the two lines of code below.		      		      'elseIf IsWindowModified(menuWindow) then		      'SetItemMark theMenu, i + 1, kBulletCharCode		      		    else		      SetItemMark theMenu, i + 1, noMark		    end if		    		  next		  		  return eventNotHandledErr		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function LocalizedText() As String		  #if targetCarbon		    soft declare function CreateStandardWindowMenu Lib CarbonFramework  (inOptions as Integer, ByRef outMenu as Integer) as Integer		    		    dim theMenu as Integer		    dim OSError as Integer = CreateStandardWindowMenu(0, theMenu)		    if OSError <> 0 or theMenu = 0 then		      return ""		    end if		    		    soft declare function CopyMenuTitleAsCFString Lib CarbonFramework (inMenu as Integer, ByRef outString as CFStringRef) as Integer		    dim menuItemText as CFStringRef		    OSError = CopyMenuTitleAsCFString(theMenu, menuItemText)		    		    soft declare sub CFRelease Lib CarbonFramework (cf as Integer)		    CFRelease theMenu		    theMenu = 0		    		    return menuItemText		  #endif		  		exception fnf as FunctionNotFoundException		  //this would be very surprising...		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function OSTypeToUInt32(x as OSType) As UInt32		  return ((AscB(MidB(x, 1))*256 + AscB(MidB(x, 2)))*256 + AscB(MidB(x, 3)))*256 + AscB(MidB(x, 4))		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub RegisterForCarbonEvents()		  static isRegistered as Boolean = false		  if isRegistered then		    return		  end if		  		  #Pragma StackOverflowChecking False		  		  soft declare function InstallEventHandler Lib CarbonLib (inTarget as Ptr, inHandler as Ptr, inNumTypes as Integer, inList as Ptr,  inUserData as Ptr, handlerRef as Ptr) as Integer		  		  //inTarget		  soft declare function GetApplicationEventTarget Lib CarbonLib () as Ptr		  		  dim eventTarget as Ptr = GetApplicationEventTarget		  if eventTarget = nil then		    return		  end if		  		  //inHandler		  soft declare function NewEventHandlerUPP Lib CarbonLib (userRoutine as Ptr) as Ptr		  		  static CallbackUPP as Ptr = nil		  if CallbackUPP = nil then		    dim m as MemoryBlock =  AddressOf HandleCarbonEvent		    if m is nil then		      return		    end if		    CallbackUPP = NewEventHandlerUPP(m)		  end if		  		  //events		  const sizeOfEventTypeSpec = 8		  const EventCount = 1		  dim eventList as new MemoryBlock(EventCount*sizeOfEventTypeSpec)		  eventList.UInt32Value(0) = OSTypeToUInt32(kEventClassMenu)		  eventList.Long(4) = kEventMenuEnableItems		  		  //inUserData		  'dim v as Variant = me		  		  //handlerRef		  //I don't want it returned		  		  dim OSError as Integer = InstallEventHandler(eventTarget, CallbackUPP, eventList.Size\sizeOfEventTypeSpec, eventList, nil, Nil)		  if OSError = 0 then		    isRegistered = true		  else		    break		  end if		  		exception fnf as FunctionNotFoundException		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RelocateApplicationSpecificMenuItems()		  static relocationPerformed as Boolean		  		  if relocationPerformed then		    return		  end if		  		  dim asMenuItems(-1) as MenuItem		  		  for i as Integer = 0 to me.Count - 1		    dim m as MenuItem = me.Item(i)		    if not (m IsA WindowMinimizeMenuItem or m IsA WindowZoomMenuItem or m IsA WindowBringAllToFrontMenuItem or m IsA WindowMenuItem or m IsA SeparatorMenuItem) then		      asMenuItems.Append m		    end if		  next		  		  if UBound(asMenuItems) > -1 then		    me.Insert 3, new SeparatorMenuItem		    for i as Integer = 0 to UBound(asMenuItems)		      me.Remove asMenuItems(i)		      me.Insert 3 + i, asMenuItems(i)		    next		  end if		  		  relocationPerformed = true		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RemoveDeadWindowMenuItems()		  for i as Integer = me.Count - 1 DownTo 0		    if me.Item(i) IsA WindowMenuItem  and WindowMenuItem(me.Item(i)).Window Is Nil then		      me.Remove me.Item(i)		    end if		  next		End Sub	#tag EndMethod	#tag Note, Name = Documentation		MacWindowMenu		4/12/2009				Charles Yeomans		charles@declareSub.com		www.declareSub.com				MacWindowMenu is a REALbasic implementation of the Carbon Window menu,		following the Aqua HIG.  To use it, add a menu at the end of the menu bar and set its superclass to WindowMenu.  		The WindowMenu class then does everything else (with one exception; see the comments on localization below).				Change Notes 4/12/2009				Changed variable names from 'attributes' to 'menuAttributes' to eliminate a conflict introduced by the REALbasic language. 		Added support for alternate window titles.				Change Notes 7/15/2007				Disabled AutoEnable in MacWindowActionMenuItem class.  Subclasses are now disabled when they should be.						Change Notes 7/1/2007				The minimize and zoom menu items are now enabled only if the front window can be minimized or zoomed.				Change Notes 6/29/2007				Menu items for collapsed windows now have the diamond mark set.				The logic of AddNewWindows has been fixed.  WindowItemWindows whose ShowInMenu property = false are now		not added to the menu.  Thanks to Patrick van der Perre for pointing out the problem.						Change Notes				This version now works correctly in Mach-O builds; thanks to Alexander Traud for alerting me.  It drops support for Mac OS 9.				A new parent class, MacWindowActionMenuItem, has been introduced to collect functionality common to WindowZoomMenuItem, 		WindowMinimizeMenuItem, and WindowBringAllToFrontMenuItem.  These menu items now perform their task by sending		HICommands.				Zoom behavior is improved; thanks again to Alexander Traud for pointing out the problem and suggesting a solution.						Window Menu Items				The default behavior is to add all document windows to the window menu. Floating windows, etc. are not added.  Windows that implement the 		WindowMenuWindow class interface can declare whether or not they are to be added using the ShowInMenu property.  This provides 		precise control over which windows are displayed in the menu.  				Windows are added in the order of creation, with the newest window at the top of the list, following the HIG.  The menu item of the 		frontmost window is checked.  Collapsed windows are supposed to display a diamond mark, but that isn't possible with the		current implementation of menus in REALbasic.				Application-Specific Menu Items				The Aqua HIG specifies that application-specific menu items should be placed between the Zoom and Bring All to Front		menu items.  You could read the HIG discussion on the Window menu to see what sorts of items are appropriate for this menu.				To add such menu items, you can add them to the window menu in the IDE, and the WindowMenu		object will move them to the recommended location.  This cannot be done in the constructor, because the IDE menu items are		added after construction.  Thus the relocation is done in the EnableMenu event handler, with a static flag to make sure that		it is done only once.						Localization				MacWindowMenu supports localized text for standard window menu items, using the hack of creating a standard window menu		and reading off the text from its menu items. Getting the localized name for the menu itself requires		that you add some information to your application's plist file.  The CFBundleLocalizations key provides a list of localizations handled		by your application.  You may need to modify the list below.						<key>CFBundleLocalizations</key>		<array>		<string>en</string>		<string>da</string>		<string>de</string>		<string>es</string>		<string>fi</string>		<string>fr</string>		<string>it</string>		<string>ja</string>		<string>ko</string>		<string>nl</string>		<string>no</string>		<string>pt</string>		<string>sv</string>		<string>zh_CN</string>		<string>zh_TW</string>		</array>				Because you must add this information to your Info.plist data, debug versions will not display the correct localized menu name unless you		add a 'plst' resource to your project containing the contents of an Info.plist file.  I just wait until I build the app, then modify Info.plist.				Because the menu name is set in the EnableMenu event handler (to work around an order-of-events thing), there is a bit of a blink if the localized		name differs from the IDE name.	#tag EndNote	#tag Constant, Name = CarbonFramework, Type = String, Dynamic = False, Default = \"Carbon.framework", Scope = Private	#tag EndConstant	#tag Constant, Name = CarbonLib, Type = String, Dynamic = False, Default = \"Carbon.framework", Scope = Private	#tag EndConstant	#tag Constant, Name = eventNotHandledErr, Type = Double, Dynamic = False, Default = \"-9874", Scope = Private	#tag EndConstant	#tag Constant, Name = kEventClassMenu, Type = String, Dynamic = False, Default = \"menu", Scope = Public	#tag EndConstant	#tag Constant, Name = kEventMenuEnableItems, Type = Double, Dynamic = False, Default = \"8", Scope = Public	#tag EndConstant	#tag Constant, Name = kEventParamDirectObject, Type = String, Dynamic = False, Default = \"----", Scope = Public	#tag EndConstant	#tag Constant, Name = typeMenuRef, Type = String, Dynamic = False, Default = \"menu", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="AutoEnable"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Checked"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="CommandKey"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Icon"			Group="Behavior"			InitialValue="0"			Type="Picture"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="KeyboardShortcut"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Text"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_Bold"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_Italic"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_mIndex"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_mName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="MenuItem"		#tag EndViewProperty		#tag ViewProperty			Name="_Underline"			Group="Behavior"			InitialValue="0"			Type="Boolean"			InheritedFrom="MenuItem"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass