#tag ModuleProtected Module JSON	#tag Method, Flags = &h21		Private Sub escape(text as string, buffer as StringBuffer)		  buffer.Append text _		  .ReplaceAll("\","\\") _		  .ReplaceAll("/","\/") _		  .ReplaceAll("""","\""") _		  .ReplaceAll(chr(8),"\b") _		  .ReplaceAll(chr(12),"\f") _		  .ReplaceAll(chr(10),"\n") _		  .ReplaceAll(chr(13),"\r") _		  .ReplaceAll(chr(9),"\t")		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function getChar(text as string, byref pointer as integer) As string		  dim char as string = text.mid(pointer,1)		  pointer = pointer + 1		  return char		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub indentBuffer(level as integer,buffer as StringBuffer)		  select case level		  case 0		    return		  case 2		    buffer.Append "  "		  case 4		    buffer.Append "    "		  case 6		    buffer.Append "      "		  case 8		    buffer.Append "        "		  case is > 9		    buffer.Append "          " //10		    indentBuffer level - 10, buffer		    		    //odd indent sizes are less popular, so improve		    //performance by testing for these after even values		    		  case 1		    buffer.Append " "		  case 3		    buffer.Append "   "		  case 5		    buffer.Append "     "		  case 7		    buffer.Append "       "		  case 9		    buffer.Append "         "		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function parse(text as string) As dictionary		  dim result as variant		  		  dim pointer as Integer = 1		  skipWhiteSpace(text,pointer)		  return parseObject(text,pointer)		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function parseArray(text as string, byref pointer as integer) As collection		  dim result as new Collection		  		  dim char as string = getChar(text,pointer)		  		  if char <> "[" then		    raise new UnsupportedFormatException		  end		  		  //check for empty array		  skipWhiteSpace(text,pointer)		  if text.mid(pointer,1) = "]" then		    pointer = pointer + 1		    return result		  end		  		  nextEntry:		  		  skipWhiteSpace(text,pointer)		  dim value as Variant = parseValue(text,pointer)		  		  result.Add value		  		  skipWhiteSpace(text,pointer)		  char = getChar(text,pointer)		  select case char		  case ","		    goto nextEntry		  case "]"		    return result		  else		    raise new UnsupportedFormatException		  end		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function parseNumber(text as string, byref pointer as integer) As variant		  dim number as string		  dim int as Boolean = true		  		  dim char as string = getChar(text,pointer)		  if char = "-" then		    number = number + char		    char = getChar(text,pointer)		  end		  		  select case char		  case "0"		    select case getChar(text,pointer)		    case "."		      goto decimalPart		    case "e"		      goto exponentPart		    else		      pointer = pointer - 1		      goto finish		    end		  case "1" to "9"		    number = number + char		    goto integerPart		  else		    raise new UnsupportedFormatException		  end		  		  integerPart:		  char = getChar(text,pointer)		  select case char		  case "0" to "9"		    number = number + char		    goto integerPart		  case "."		    number = number + char		    goto decimalPart		  case "e", "E"		    number = number + char		    goto exponentPart		  else		    pointer = pointer - 1		    goto finish		  end		  		  decimalPart:		  int = false		  char = getChar(text,pointer)		  Select case char		  case "0" to "9"		    number = number + char		  else		    raise new UnsupportedFormatException		  end		  		  continueDecimal:		  char = getChar(text,pointer)		  select case char		  case "0" to "9"		    number = number + char		    goto continueDecimal		  case "e", "E"		    number = number + char		    goto exponentPart		  else		    pointer = pointer - 1		    goto finish		  end		  		  exponentPart:		  int = false		  char = getChar(text,pointer)		  select case char		  case "+", "-"		    text = text + char		    goto continueExponent		  else		    pointer = pointer - 1		  end		  		  continueExponent:		  char = getChar(text,pointer)		  select case char		  case "0" to "9"		    number = number + char		    goto continueExponent		  else		    pointer = pointer - 1		  end		  		  finish:		  dim value as double = val(number)		  if int then		    if value > 2147483647 or value < -2147483648 then		      dim i as int64 = value //64 bit integer		      return i		    else		      dim i as int32 = value //32 bit integer		      return i		    end		  else		    return value //double		  end		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function parseObject(text as string, byref pointer as integer) As dictionary		  dim result as new Dictionary		  		  dim char as string = getChar(text,pointer)		  		  if char <> "{" then		    raise new UnsupportedFormatException		  end		  		  //check for empty object		  skipWhiteSpace(text,pointer)		  if text.mid(pointer,1) = "}" then		    pointer = pointer + 1		    return result		  end		  		  nextEntry:		  		  skipWhiteSpace(text,pointer)		  dim key as string = parseString(text,pointer)		  		  skipWhiteSpace(text,pointer)		  if getChar(text,pointer) <> ":" then raise new UnsupportedFormatException		  		  skipWhiteSpace(text,pointer)		  dim value as Variant = parseValue(text,pointer)		  		  result.Value(key) = value		  		  skipWhiteSpace(text,pointer)		  char = getChar(text,pointer)		  select case char		  case ","		    goto nextEntry		  case "}"		    return result		  else		    raise new UnsupportedFormatException		  end		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function parseString(text as string, byref pointer as integer) As string		  dim result as new StringBuffer		  		  dim char as string = getChar(text,pointer)		  		  if char <> """" then		    raise new UnsupportedFormatException		  end		  		  nextChar:		  		  char = getChar(text,pointer)		  select case char		  case """"		    return result		  case "\"		    goto escape		  case ""		    //end of input		    return result		  else		    result.Append char		    goto nextChar		  end		  		  escape:		  char = getChar(text,pointer)		  select case asc(char)		  case 34, 92, 47 // " \ /		    result.Append char		  case 98 //b		    result.Append chr(8)		  case 102 //f		    result.Append chr(12)		  case 110 //n		    result.Append chr(10)		  case 114 //r		    result.Append chr(13)		  case 116 //t		    result.Append chr(9)		  case 117 //u		    dim uni as  string = text.Mid(pointer,4)		    if len(uni) < 4 then raise new UnsupportedFormatException		    result.Append Encodings.UTF8.Chr(val("&h" + uni))		  else		    raise new UnsupportedFormatException		  end		  		  goto nextChar		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function parseValue(text as string, byref pointer as integer) As variant		  dim chars as string = text.mid(pointer,4)		  pointer = pointer + 4		  select case chars		  case "true"		    return true		  case "fals"		    if getChar(text,pointer) = "e" then return false		    pointer = pointer - 5		  case "null"		    return nil		  else		    pointer = pointer - 4		  end		  		  dim char as string = chars.left(1)		  select case char		  case "-", "0" to "9"		    return parseNumber(text,pointer)		  case """"		    return parseString(text,pointer)		  case "{"		    return parseObject(text,pointer)		  case "["		    return parseArray(text,pointer)		  case ""		    return nil //end of file		  else		    raise new UnsupportedFormatException		  end		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function serialise(data as dictionary) As string		  if data = nil then return ""		  dim buffer as new StringBuffer		  serialise(data,0,buffer)		  return buffer		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub serialise(value as variant, indent as integer, buffer as StringBuffer)		  if value = nil then		    buffer.Append "null"		    return		  end		  		  select case value.Type		  case value.TypeBoolean		    if value = true then buffer.Append "true" else buffer.Append "false"		    		  case value.TypeInteger, value.TypeLong		    buffer.Append value		    		  case value.TypeDouble		    dim fmt as string = format(value,decimalFormat)		    if fmt.InStr(",") > 0 and decimalFormat.InStr(",") = 0 then fmt = fmt.Replace(",",".")		    buffer.Append fmt		    		  case value.TypeString		    buffer.Append """"		    escape value.StringValue,buffer		    buffer.Append """"		    		  case value.TypeObject		    if value isa Collection then		      buffer.Append "["		      if Collection(value).Count > 0 then		        if not compact Then buffer.Append EndOfLine		        dim c as Collection = Collection(value.ObjectValue)		        for i as integer = 1 to c.Count		          if not compact then indentBuffer indent + indentSpacing,buffer		          serialise c.Item(i),indent + indentSpacing,buffer		          if i < c.Count then buffer.Append ","		          if not compact Then buffer.Append EndOfLine		        next		        if not compact then indentBuffer indent,buffer		      end		      buffer.Append "]"		      		    elseif value isa Dictionary then		      buffer.Append "{"		      if Dictionary(value).Count > 0 then		        if not compact Then buffer.Append EndOfLine		        dim d as Dictionary = Dictionary(value.ObjectValue)		        for i as integer = 0 to d.Count - 1		          dim key as string = d.Key(i)		          if not compact then indentBuffer indent + indentSpacing,buffer		          buffer.Append """"		          escape key,buffer		          buffer.Append """:"		          serialise d.Value(key),indent + indentSpacing,buffer		          if i < d.Count - 1 then buffer.Append ","		          if not compact Then buffer.Append EndOfLine		        next		        if not compact then indentBuffer indent,buffer		      end		      buffer.Append "}"		      		    else		      raise new UnsupportedFormatException		      		    end		    		  else		    raise new UnsupportedFormatException		    		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub skipWhiteSpace(text as string, byref pointer as integer)		  do		    select case getChar(text,pointer)		    case " ", chr(9), chr(10), chr(13)		    else		      pointer = pointer - 1		      return		    end		  loop		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected compact As Boolean = false	#tag EndProperty	#tag Property, Flags = &h1		Protected decimalFormat As String = """#.###############"""	#tag EndProperty	#tag Property, Flags = &h1		Protected indentSpacing As Integer = 2	#tag EndProperty	#tag Constant, Name = version, Type = Double, Dynamic = False, Default = \"1.5", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule