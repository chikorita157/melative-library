#tag ModuleProtected Module xmlFunctions	#tag Method, Flags = &h0		Function getContext(root As xmlnode) As xmlnodelist		  dim yourlist As XmlNodeList		  		  yourlist = root.Xql("//experience/item/context")		  		  Return yourlist		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getList(root As xmlnode) As xmlnodelist		  dim yourlist As XmlNodeList		  		  yourlist = root.Xql("//experience/item")		  		  Return yourlist		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getProgress(root As xmlnode) As xmlnodelist		  dim yourlist As XmlNodeList		  		  yourlist = root.Xql("//experience/item/progress")		  		  Return yourlist		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getsearchlist(root As xmlnode) As xmlnodelist		  dim yourlist As XmlNodeList		  		  yourlist = root.Xql("//anime")		  		  Return yourlist		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getXMLroot(xml As xmldocument) As xmlnode		  dim root As new XmlNode		  		  root = xml.FirstChild		  		  Return root		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function parseAnime(animeseries As xmlnode) As dictionary		  dim d As new Dictionary		  dim i As Integer		  dim c As Integer		  		  c = animeseries .ChildCount - 1		  		  for i = 0 to c		    if not (animeseries.Child(i).FirstChild is nil) then		      d.Value(animeseries.Child(i).Name) = animeseries.Child(i).FirstChild.Value		    Else		      d.Value(animeseries.Child(i).Name) = ""		    end if		  next		  		  		  		  Return d		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function parseContext(animeseries As xmlnode) As dictionary		  dim d As new Dictionary		  dim i As Integer		  //dim c As Integer		  		  //c = animeseries .ChildCount - 1		  		  //for i = 0 to c		  for i = 0 to 3		    if not (animeseries.Child(i).FirstChild is nil) then		      //break		      if animeseries.child(i).name = "alias" then		        d.Value(animeseries.Child(3).Name) = animeseries.Child(3).FirstChild.Value		      else		        d.Value(animeseries.Child(i).Name) = animeseries.Child(i).FirstChild.Value		      end if		    Else		      d.Value(animeseries.Child(i).Name) = ""		    end if		  next		  		  		  		  Return d		End Function	#tag EndMethod	#tag Constant, Name = asHTML, Type = String, Dynamic = False, Default = \"<xsl:stylesheet xmlns:xsl\x3D\"http://www.w3.org/1999/XSL/Transform\" version\x3D\"1.0\" xmlns\x3D\"http://www.w3.org/1999/xhtml\">\r <xsl:template match\x3D\"/\">\r <html xmlns\x3D\"http://www.w3.org/1999/xhtml\">\r <head>\r <title>Test</title>\r </head>\r <body>\r <table border\x3D\"1\">\r <th>First Name</th>\r <th>Last Name</th>\r <th>Gender</th>\r <th>Email</th>\r <th>CDATA</th>\r <xsl:for-each select\x3D\"people\">\r <xsl:for-each select\x3D\"person\">\r <tr>\r <td><xsl:value-of select\x3D\"firstname\"/></td>\r <td><xsl:value-of select\x3D\"lastname\"/></td>\r <xsl:if test\x3D\"@gender\">\r   <td><xsl:value-of select\x3D\"@gender\"/></td>\r </xsl:if>\r <xsl:if test\x3D\"gender\">\r   <td><xsl:value-of select\x3D\"gender\"/></td>\r </xsl:if>\r <td><xsl:value-of select\x3D\"email\"/></td>\r <td><xsl:value-of select\x3D\"chardata\"/></td>\r </tr>\r </xsl:for-each>\r </xsl:for-each>\r </table>\r </body>\r </html>\r </xsl:template>\r </xsl:stylesheet>\r", Scope = Public	#tag EndConstant	#tag Constant, Name = IndentXML, Type = String, Dynamic = False, Default = \"<\?xml version\x3D\"1.0\" encoding\x3D\"UTF-8\"\?><xsl:transform version\x3D\"1.0\" xmlns:xsl\x3D\"http://www.w3.org/1999/XSL/Transform\"><xsl:output method\x3D\"xml\" indent\x3D\"yes\" /><xsl:template match\x3D\"/\"><xsl:copy-of select\x3D\"/\" /></xsl:template></xsl:transform>", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule